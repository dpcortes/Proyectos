library(kernlab)
install.packages("kernlab")
library(kernlab)
data("spam")
str(spam[, 1:5])
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator== 1, ]
testSpam <- spam[trainIndicator== 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+ 1))
hCluster <- hclust(dist(t(trainSpam[ , 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[ , 1:55]))))
hClusterUpdated = hclust(dist(t(log10(trainSpam[ , 1:55]+ 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x!= (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam[i], response = "numType"))
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.gml(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType"))
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.gml(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType"))
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.gml(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.gml(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.gml(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
gmlFit = gml(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
gmlFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
warnings
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x >= 11] <- 4
y <- x[x >= 11] <- 4
y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>=11] <- 4
x
setwd("C:/Users/dpcortes/Desktop/Yo/R/Programacion en R/Semana 1")
list.files()
read.csv("hw1_data")
data <- read.csv("hw1_data.csv")
str(data, 2)
head(data, 2)
nrow(data)
tail(data, 2)
data[, 47]
library(kernlab)
data("spam")
str(spam[, 1:5])
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainIndicator
trainIndicator
table(trainIndicator)
trainSpam <- spam[trainIndicator== 1, ]
testSpam <- spam[trainIndicator== 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+ 1))
hCluster <- hclust(dist(t(trainSpam[ , 1:57])))
hClusterUpdated = hclust(dist(t(log10(trainSpam[ , 1:55]+ 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x!= (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
gmlFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, gmlFit, costFunction, 2)$delta[2]
}
warnings()
names(trainSpam)[which.min(cvError)]
predictionModel = gml(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
(61+458)/(1346+61+458+449)
library(lattice)
setwd("C:/Users/dpcortes/Desktop/Yo/R/Reproducible Research/Proyectos")
datos <- read.csv("activity.csv", header=T, sep=",", na.strings="NA")
str(datos)
head(datos, 2)
datos$date<-as.Date(datos$date, "%Y-%m-%d")
Interval<-unique(tidydata$interval)
tidydata<-na.omit(datos)
Interval<-unique(tidydata$interval)
Interval
tidydata$interval
v1 <- data.frame(typo=c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3), rnorm(15))
head(v1, 10)
v2 <- unique(v1$typo)
v2
interval <- unique(tidydata$interval)
interval
tapply(v1$rnorm.15., v1$typo, mean)
names(avgStep)
avgStep<-tapply(tidydata$steps, tidydata$interval, mean)
names(avgStep)
head(avgStep, 2)
head(avgStep, 20)
subset(avgStep, 835)
subset(avgStep, avgStep$names == 835)
str(avgStep)
dim(avgStep)
avgStep("835")
avgStep["835",]
avgStep["835"]
isna <- is.na(datos)
datos2 <- datos
datos2$steps
day <- datos2$date
datos2 <- cbind(datos2, day)
datos2 <- as.character(weekdays(datos2$day))
datos2$day  <-gsub("Monday", "Weekday",datos2$day)
datos2$day  <- gsub("Monday", "Weekday",datos2$day)
str(datos2)
datos2$day
head(datos2)
datos2
head(datos2)
head(datos2, 20)
datos2 <- as.character(weekdays(datos2$day))
datos2 <- as.character(weekdays(datos2))
day <- datos2$date
day <- datos2$date
day <- datos2$date
day <- datos2$date
str(datos2)
isna <- is.na(datos)
datos2 <- datos
datos2$steps[which(isna)] <- avgStep[match(datos$interval[which(isna)], datos$interval)]
str(datos2)
day <- datos2$date
datos2 <- cbind(datos2,day)
datos2$day<-as.character(weekdays(datos2$day))
datos2$day<-gsub("Monday", "Weekday", datos2$day)
datos2$day<-gsub("Tuesday", "Weekday", datos2$day)
datos2$day<-gsub("Wednesday", "Weekday", datos2$day)
datos2$day<-gsub("Thursday", "Weekday", datos2$day)
datos2$day<-gsub("Friday", "Weekday", datos2$day)
datos2$day<-gsub("Saturday", "Weekend", datos2$day)
datos2$day <- gsub("Sunday", "Weekend", datos2$day)
datos2$day<-as.factor(datos2$day)
avgStep2 <- ddply(datos2, .(interval, day), summarize, steps = mean(steps))
avgStep2 <- dply(datos2, .(interval, day), summarize, steps = mean(steps))
avgStep2 <- apply(datos2, .(interval, day), summarize, steps = mean(steps))
avgStep2 <- apply(datos2, .(interval, day), steps = mean(steps))
avgStep2 <- sapply(datos2, .(interval, day), summarize, steps = mean(steps))
avgStep2 <- lapply(datos2, (interval, day), summarize, steps = mean(steps))
avgStep2 <- sapply(datos2, (interval, day), summarize, steps = mean(steps))
avgStep2 <- apply(datos2, .(interval, day), summarize, steps = mean(steps))
avgStep2 <- apply(datos2, c(interval, day), summarize, steps = mean(steps))
avgStep2 <- ddply(datos2, .(interval, day), summarize, steps = mean(steps))
library(plyr)
avgStep2 <- ddply(datos2, .(interval, day), summarize, steps = mean(steps))
datos2$day <- as.factor(datos2$day)
head(datos2$day)
day <- datos2$date
datos2 <- cbind(datos2,day)
datos2$day <- as.character(weekdays(datos2$day))
datos2$day <- gsub("Monday", "Weekday", datos2$day)
datos2$day <- gsub("Tuesday", "Weekday", datos2$day)
datos2$day <- gsub("Wednesday", "Weekday", datos2$day)
datos2$day <- gsub("Thursday", "Weekday", datos2$day)
datos2$day <- gsub("Friday", "Weekday", datos2$day)
datos2$day <- gsub("Saturday", "Weekend", datos2$day)
datos2$day <- gsub("Sunday", "Weekend", datos2$day)
datos2$day <- as.factor(datos2$day)
datos2$day
day <- datos2$date
datos2 <- cbind(datos2,day)
datos2$day <- as.character(weekdays(datos2$day))
datos2$day
datos2$day <- as.character(weekdays(datos2$day))
weekdays.Date()
weekdays(datos2$day)
datos2$day <- weekdays(datos2$day)
day <- datos2$date
datos2 <- cbind(datos2,day)
datos2$day <- as.character(weekdays(datos2$day))
datos2$day <- gsub("Monday", "Weekday", datos2$day)
datos2$day <- as.character(weekdays(datos2$day))
datos2$day <- weekdays(datos2$day)
day
datos2
datos2$day
datos2 <- cbind(datos2,day)
str(datos2)
head(datos2)
head(day)
head(datos)
head(datos2)
head(datos2$day, 3)
tail(datos2$day)
sub1 <- datos2[ , day == "lunes"]
sub1 <- datos2[ , "lunes"]
head(day)
day <- datos2$date
haed(day)
head(datos2)
datos2[5] <- NULL
head(datos2)
datos2[4]<- NULL
head(datos2)
day <- datos2$day
head(day)
datos2 <- cbind(datos2, day)
head(datos2)
datos2$day <- as.character(weekdays(datos2$day))
head(datos2$day)
datos2$day <- gsub("Monday", "Weekday", datos2$day)
datos2$day <- gsub("Tuesday", "Weekday", datos2$day)
datos2$day <- gsub("Wednesday", "Weekday", datos2$day)
datos2$day <- gsub("Thursday", "Weekday", datos2$day)
datos2$day <- gsub("Friday", "Weekday", datos2$day)
datos2$day <- gsub("Saturday", "Weekend", datos2$day)
datos2$day <- gsub("Sunday", "Weekend", datos2$day)
datos2$day <- as.factor(datos2$day)
head(datos2$day)
head(datos$date)
head(datos)
day <- datos2$day
head(day)
github
download.packages(knitr)
install.packages('knitr', dependencies = TRUE)
library(knitr)
knit2html()
knit2html(PA1_template)
knit2html(file:///C:/Users/dpcortes/Desktop/Yo/R/Reproducible Research/Proyectos/PA1_template.html)
knit2html(PA1_template.html)
knit2html(PA1_template.md)
knit2html(PA1_template.Rmd)
setwd("C:/Users/dpcortes/Desktop/Yo/R/Reproducible Research/Proyectos")
knit2html(PA1_template.Rmd)
knit2html(./PA1_template.Rmd)
knit2html("PA1_template.Rmd")
